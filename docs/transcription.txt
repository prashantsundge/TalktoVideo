Satya Nadella, thank you so much for doing this. I want to be very, very respectful of your time. The first question is the Internet is abuzz with conversation of. Satya Nadella said that SaaS is dead. Now, I know you know that's not exactly what you said and the Internet has lost nuance over time, but I'd love for you to tell me how that shift happens from SaaS all the way to agents. Yeah, I mean, to me, whenever there has been a real platform shift, the core application architectures have changed. If you look back, let's go all the way back to when the relational database was born. That is the first time we really said, oh wow, I can separate out my data tier from my application. Before that we were building these essentially ISAM databases right into the app. And then we said, no, no, no, let's have relational algebra. I have SQL, I have data and then I can build my business logic on top of it. Then of course other platforms came, like the web and what have you. And then we said, oh, what's an end tier way to write applications? How should I restructure my business logic? I think that something of that scale, if not more, is going to happen again with the application logic, right. And this time around, the thing about agents is they are not going to be bound to essentially any one SaaS application and its data, right? So I'll have an agentic sort of view where the task, the intent and I will go operate and orchestrate all the logic across multiple SaaS applications, right? I'll go call a bunch of AP through tools use. So I'll call a bunch of APIs. In fact, I'll post train my model to know about multiple SaaS applications in the agent tier. And so that's what's going to happen. So I think what will happen is these, I mean SaaS applications are a CRUD database with a lot of business logic. So the CRUD database will then get orchestrated outside of the business logic tier of just the SaaS application is what is going to happen. Like right now in my own use case, I go to Copilot, I say at sales, which is actually touching. Dynamic CRM brings back whatever the account information. Then it brings back information from Office365. I put it into pages, I share it with people, the entire workflow, right? I never, I mean everybody talks about their CRM database but anybody, nobody uses it because when was the last time I logged into CRM? Never. Except now I'm every day querying my CRM database Because it's so much easier because it's one agent away and it's working with all the other agents. So that is what's going to be the change. And when you're hiring people, I think in the future you'll now hire people plus their workflows. That's exactly right. And in fact that's a way to think about it. It's a swarm of agents. I mean in a prosaic level I kind of look at it and say it's not like when you hire a data analyst, you hire them and their spreadshee. Yeah, that's kind of what it is. Right. So it's like agents are going to, I think two years from now we're going to say, yeah, agents, Yeah, I build them like all day, like build docs and spreadsheets and I think that's kind of. And I come with a basket of them. There you go. I have a basket of my agents and I already see that. Right. Like every SharePoint I have a leadership meeting and leadership team in which there's like all these documents. The best grounding data is all in there. So I just have a simple agent now, which is a SharePoint agent that I'm always addressing. And it's fantastic not to just to have to go to a separate entity and query it, but to have it right there. A follow up question here is how does India stay competitive as this changes? Because if you look at when the LLMs first came out, first became popular, we always said that if India can build foundational models and sort of do what the west has done, that'll be an advantage for us. But we're now starting to see many of those get commoditized and we're starting to see that the real mote is the ability to keep coming up with breakthroughs. If you had to pick something that India can do now that is still defensible in the next few years, what would that be? It's not just India comment, because it's a comment for all of us. Right. I mean at the end of the day I think you really want to take what may be commodity and then do higher value. And then if that higher value thing becomes commodity, you have to be ready to commoditize that and move on to the next. Because that's the thing in tech, right. There is no franchise value. Right. So whenever you think quote unquote, these moats and so on are really overstated sometimes because you can't really fall in love with your own moat because it'll get attacked. That said, I think India has tremendous opportunity, right? If I think about the total developer community here, the entrepreneurial energy here, the application space, right? When I think about all this quick commerce work that's happening, that's pretty unique. So whoever builds AI applied to that here, SaaS companies out of here really taking the business model disruption even, right? I mean I think the next generation SaaS company that says, you know what, I'm going to embrace these agents, in fact I'll expose them as first class agents right into copilot. In fact change even my business model around it. That's a massive opportunity. In fact it's a massive attack vector on any existing SaaS company that may have a massive moat, quote unquote, right? So I think that things like that. And by the way, even on the LLM space, right, the design space is not narrow when I talk to customers. That's why we are building out foundry such that we can even be distribution for people who are building purpose built models for industries. You're giving them customers? Yeah, we're going to bring them customers. But also you can build a great LLM or a great foundation model for different sciences, for different industries, for different roles that are optimized, for cogs, for latency. So I think the design space is large enough that it may not be just this one model that rules them all, but there will be in every layer of the tech stack opportunities for innovation. That's fantastic. I want to ask you a more personal question. Let's say if you were 25 years old, you were sitting out of India. Let's say you're an engineer by training and you're seeing all of this happen, you're seeing all these new models come out. You're also seeing the ambiguity that you and everyone else are facing, right? How would you tackle that? How would you upskill if you were young again? That's a great one. In fact, the way I think one has to deal with both the pace and the scale of innovation is to be very good at sampling with agility is what I describe it. So that means, for example the guidance I give ourselves as a company is keep on the frontier and be ready for the next drop. So experiment. Yeah, not experiment, but it's kind of like you want to work in multiple gears. So you're all the time sort of looking at what's coming and saying what is the impossible thing that I can make possible with what's coming while I am then making what I built yesterday optimal, optimized for cogs for latency for deployment. So that two gears, you have to simultaneously work on it. So I mean, experimentation is obviously part of it, but that you can't say, I'm going build this and then I'll go to next. You're simultaneously working with some frontier thing where you're making something that is impossible today more possible because of what's coming while you're optimizing. That, I think is the way, at least as a software developer, you have to sort of work in this age of AI more so like even in Moore's Law, like, you know, we used to do that, but this is sort of, you know, when every six month, every three months, when the performance is doubling, that's a double. Like, even for tech, that's not something we're used to. Yeah, I mean, I can give an example of this. I just tried Trellis, which is your text to 3D model, and I was blown away. I was like, this is so good. And I was able to try it on my local computer and I said, imagine this in two years. It's sort of like the GPT 3.5 right now. And then two years is going to get good. Are there any other things that you've seen in research level or the demo level where you've seen it and you think it's going to play out? But in five years? I think the thing that I'm most excited about is on what will happen when this particular model architecture or other model architecture breakthroughs will have on science. If you start saying, wow, even start with chemistry, we now have good models for doing novel new materials in material science. When I think about our data center and we say, hey, we want to build a more sustainable future, whether it's steel or whatever, it's all about material science or having models that impact chemistry, biology is probably the hardest. That's where I think we're very, very excited about even some of the new models that we built for doing molecular dynamics, which is one of the, you know, one thing is to be able to model a protein structure, but to be able to then model the entire dynamic nature of a molecule, that I think is going to be breakthrough in something like drug discovery. So science probably will be the biggest, especially the combination of progress in AI and AI for science and maybe quantum, that to me might be next big breakthrough where science itself is computed. Interesting. I have one last question right, which is you spoke about how these models are getting better every three months, every four months. But I've noticed a problem with legacy businesses I meet people who say, I tried this model a year ago, it was meh, it had hallucination. And then they never give it another shot. And this seems to be a problem. Right? Which is a bunch of people use a specific type of model many years ago or many months ago, and they don't try it again. What's the best method? What's your advice to them? Yeah, and that would be a big mistake. Right. So which is in some sense you really want to. As I said, that's why you want to be able to find some place where you can deploy something. And then it's path dependent. Right. All strategy is path dependent. If you don't get started, you will never get shots on goal. And like one of my friends once said to me, you can never get fit by watching others go to the gym. So you got better me in the gym every day lifting weights if you want to have a shot. So I think the best way to do it is sample the best. You know, figure out how to take the most high ambitious scenario, and then start deploying at scale what makes sense for you from an economics and scenario perspective. If you care about hallucination, there are thousand ways to get rid of hallucinations. Like you have grounding now. Yeah, that's right. Grounding is one. But quite frankly, if really you don't want to use an LLM, go use just regular machine learning. Right. If that is like, if you're so worried about sort of the 99.9 percentile, don't use some of these things where there are error bands, because that's why I think evals are important and really being driven by what's your error bound for humans or for models, and then using that as the real criteria. But then keep at it. Interesting. Thank you so much. This was an amazing conversation. I learned a lot. I'm sure people watching learned a lot as well. Thank you, Sathya. Absolutely. Such a pleasure. Thank you.